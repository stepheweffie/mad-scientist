name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
        
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🖤 Check formatting with Black
      run: black --check --diff .
      
    - name: 📄 Check import sorting with isort
      run: isort --check-only --diff .
      
    - name: 🔒 Security check with Bandit
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: 📊 Upload Bandit Report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json
        
    - name: 🛡️ Safety check for vulnerabilities
      run: safety check --json --output safety-report.json || true
      
    - name: 📊 Upload Safety Report  
      uses: actions/upload-artifact@v3
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: 🧪 Run Tests with Coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: 📊 Upload Coverage Reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 📊 Upload Coverage Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  health-check:
    name: 🏥 Application Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🚀 Start Application
      run: |
        export SECRET_KEY="test-secret-key"
        export API_BASE_URL="https://api.test.com/"
        export ACCOUNT_ID="test-account"
        export AUTH_TOKEN="test-token"
        export LOG_LEVEL="DEBUG"
        
        # Start the application in background
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for application to start
        sleep 10
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        # Stop the application
        kill $APP_PID
        
    - name: ✅ Health Check Passed
      run: echo "Application health check completed successfully!"

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mad-scientist:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker Container
      run: |
        # Run container in detached mode
        docker run -d --name test-container \
          -p 8000:8000 \
          -e SECRET_KEY="test-secret" \
          -e API_BASE_URL="https://api.test.com/" \
          -e ACCOUNT_ID="test" \
          -e AUTH_TOKEN="test" \
          mad-scientist:test
          
        # Wait for container to be ready
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  code-analysis:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true  # Don't fail the build if SonarCloud isn't configured
      
    - name: 📊 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
      continue-on-error: true
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      continue-on-error: true

  dependency-check:
    name: 🔒 Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔍 Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true  # Don't fail if Snyk isn't configured
      
    - name: 📊 Upload Snyk Report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
      if: always()

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, health-check, docker-build, code-analysis, dependency-check]
    if: always()
    
    steps:
    - name: 📊 CI Results Summary
      run: |
        echo "## 🧪 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| 🧪 Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏥 Health Check | ${{ needs.health-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Code Analysis | ${{ needs.code-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: ✅ All Checks Passed
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.health-check.result == 'success' && needs.docker-build.result == 'success' }}
      run: echo "🎉 All CI checks passed successfully!"
      
    - name: ❌ Some Checks Failed  
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.health-check.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed. Please review the logs above."
        exit 1
